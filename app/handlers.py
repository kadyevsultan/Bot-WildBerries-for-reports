from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from app.database.models import async_session
import app.database.requests as db

from app.states import AddShop, Report #–°–æ—Å—Ç–æ—è–Ω–∏—è
from app.states import get_shop_name #–§—É–Ω–∫—Ü–∏–∏

#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
from app.reports import (
    get_sales_sum,
    get_average_price_for_product,
    get_count_products_sold,
    get_commission_acquiring,
    get_discount_wb,
    get_price_delivery,
    get_price_storage,
    get_wb_commission,
)

from app.keyboards import (
    add_shop_confirm_keyboard,
    get_shops_delete_keyboard, 
    get_shops_for_report_keyboard, 
    get_date_for_report_keyboard,
    get_type_for_report_keyboard
    )

from datetime import datetime, timedelta
router = Router()


@router.message(CommandStart())
async def cmd_start(message):
    await db.set_user(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
                         "–Ø - –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –Ω–∞ Wildberries. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                         "- üìä –ü–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n"
                         "- üè™ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã).\n"
                         "- üìú –°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n"
                         "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –º–∞–≥–∞–∑–∏–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addshop üöÄ\n"
                         "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")
    
    
@router.message(Command("help"))
async def cmd_help(message):
    await message.answer("–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
                         "1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addshop, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω, –≤–≤–µ–¥—è API-–∫–ª—é—á –∏ –µ–≥–æ –∏–º—è.\n"
                         "2Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω: –ö–æ–º–∞–Ω–¥–∞ /delshop –ø–æ–º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω.\n"
                         "3Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤: –ö–æ–º–∞–Ω–¥–∞ /shops –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã.\n"
                         "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç: –° –ø–æ–º–æ—â—å—é /report –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥.\n\n"
                         "üîí –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ.\n\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addshop –∏ –Ω–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏! üöÄ"
                         )
    
    
@router.message(Command("addshop"))
async def cmd_addshop(message, state: FSMContext):
    await state.set_state(AddShop.api_key)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –º–∞–≥–∞–∑–∏–Ω–∞ Wildberries(–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å!):")
    
    
@router.message(AddShop.api_key)
async def cmd_addshop_api_key(message, state: FSMContext):
    api_key = message.text.strip()
    
    shop_name = await get_shop_name(api_key)
    
    if shop_name == "Error":
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API-–∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()  
    else:
        await state.update_data(api_key=api_key, shop_name=shop_name)
        await state.set_state(AddShop.shop_name)
        await message.answer(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–∞–π–¥–µ–Ω: {shop_name}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ?", reply_markup=await add_shop_confirm_keyboard())
        
@router.callback_query(F.data.startswith("shopadd_"), AddShop.shop_name)
async def cmd_confirm_shop_name(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data

    if user_answer == "shopadd_confirm":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
        user_data = await state.get_data()
        api_key = user_data["api_key"]
        shop_name = user_data["shop_name"]
        tg_id = callback_query.from_user.id

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.add_shop(tg_id, api_key, shop_name)

        await callback_query.message.edit_text(f"–ú–∞–≥–∞–∑–∏–Ω {shop_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞

    elif user_answer == "shopadd_cancel":
        await callback_query.message.edit_text("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addshop.")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        

@router.message(Command("shops"))
async def cmd_shops(message):
    shops = await db.get_shops(message.from_user.id)
    if not shops:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç")
        return
    
    shop_list = "\n".join([f"‚Ä¢ {shop.shop_name}" for shop in shops])
    await message.answer(f"–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:\n{shop_list}")


@router.message(Command("delshop"))
async def cmd_delshop(message):
    shops = await db.get_shops(message.from_user.id)
    if not shops:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=await get_shops_delete_keyboard(message.from_user.id))
    
@router.callback_query(F.data.startswith("shopdelete_"))
async def cmd_delshop_callback(callback_query: CallbackQuery):
    data = callback_query.data
    tg_id = callback_query.from_user.id
    shop_name = data[len("shopdelete_"):]
    
    if data == 'shopdelete_cancel_delete':
        await callback_query.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return 
    
    try:
        await db.del_shop(tg_id, shop_name)
        await callback_query.message.edit_text(f"–ú–∞–≥–∞–∑–∏–Ω {shop_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
    
    
@router.message(Command("report"))
async def cmd_report(message, state: FSMContext):
    shops = await db.get_shops(message.from_user.id)
    if not shops:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç")
        return
    await state.set_state(Report.shop)
    await message.answer(
        "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è!\n"
        "–¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ API WB –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤.\n "
        "–ù–µ —Å—Ç–æ–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º.\n"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=await get_shops_for_report_keyboard(message.from_user.id))
    
    
@router.callback_query(F.data.startswith("shopreport_"), Report.shop)
async def cmd_report_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    shop_name = data[len("shopreport_"):]
    
    if data == 'shopreport_cancel_report':
        await callback_query.message.edit_text("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return 
    
    try:
        await state.update_data(shop=shop_name)
        await state.set_state(Report.date_from)
        await callback_query.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:', reply_markup=await get_date_for_report_keyboard())
    except Exception as e:
        await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await state.clear()
        
@router.callback_query(F.data.startswith("shopreport_date_"), Report.date_from)
async def cmd_report_date_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    dateFrom = ''
    dateTo = ''
    
    if data == 'shopreport_date_cancel_report':
        await callback_query.message.edit_text("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return 
    
    try:
        if data == 'shopreport_date_today':
            dateFrom = datetime.now().strftime("%Y-%m-%d")
            dateTo = dateFrom
            
        elif data == 'shopreport_date_yesterday':
            dateFrom = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            dateTo = dateFrom

        elif data == 'shopreport_date_week':
            dateFrom = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
            dateTo = datetime.now().strftime("%Y-%m-%d")
            
        elif data == 'shopreport_date_custom':
            await callback_query.message.edit_text(f'–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-01-01)')
            await state.set_state(Report.custom_date)
            return
            
        await state.update_data(date_from=dateFrom, date_to=dateTo)
        
        await state.set_state(Report.type_report)
        
        await callback_query.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:', reply_markup=await get_type_for_report_keyboard())
        
    except Exception as e:
        await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await state.clear()
        

@router.message(Report.custom_date)
async def cmd_report_custom_date(message, state: FSMContext):
    try:
        custom_date = message.text.strip()
        datetime.strptime(custom_date, "%Y-%m-%d")
        
        await state.update_data(date_from=message.text)
        await state.set_state(Report.date_to)
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-01-02)')
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-01-01)")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await state.clear()


@router.message(Report.date_to)
async def cmd_report_date_to(message, state: FSMContext):
    try:
        date_to = message.text.strip()
        datetime.strptime(date_to, "%Y-%m-%d")
        
        await state.update_data(date_to=message.text)
        await state.set_state(Report.type_report)
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:', reply_markup=await get_type_for_report_keyboard())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-01-01)")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await state.clear()

@router.callback_query(F.data.startswith("shopreport_type_"), Report.type_report)
async def cmd_report_type_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    tg_id = callback_query.from_user.id
    state_data = await state.get_data()
    shop_name = state_data.get("shop")
    date_from = state_data.get("date_from")
    date_to = state_data.get("date_to")
    api_key = await db.get_api_by_shop_name(session=async_session, shop_name=shop_name, tg_id=tg_id)
    
    if data == 'shopreport_type_cancel_report':
        await callback_query.message.edit_text("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return 
    
    try:
        await state.update_data(type_report=data[len("shopreport_type_"):])
        await state.clear()
        if data == 'shopreport_type_sales_sum':
            result = await get_sales_sum(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        elif data == 'shopreport_type_sales_count_products':
            result = await get_count_products_sold(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        elif data == 'shopreport_type_avg_price':
            result = await get_average_price_for_product(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        elif data == 'shopreport_type_wb_commission':
            result = await get_wb_commission(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        elif data == 'shopreport_type_wb_discount':
            result = await get_discount_wb(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        elif data == 'shopreport_type_acquiring_commission':
            result = await get_commission_acquiring(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        elif data == 'shopreport_type_logistics_cost':
            result = await get_price_delivery(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        elif data == 'shopreport_type_storage_cost':
            result = await get_price_storage(api_key=api_key, dateFrom=date_from, dateTo=date_to)
            await callback_query.message.edit_text(result)
        
    except Exception as e:
        await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await state.clear()
        
        
@router.message(F.text)
async def cmd_unknown_text(message):
    await message.answer("–ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
    
    
@router.message(F.text.startswith("/"))
async def cmd_unknown_command(message):
    await message.answer("–ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")